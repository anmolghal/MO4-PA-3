import java.util.ListIterator;

public class TwoWayLinkedList<E> implements MyList<E> {
  private Node<E> head, tail;
  private int size = 0; // Number of elements in the list

  /** Create an empty list */
  public TwoWayLinkedList() {
  }

  /** Create a list from an array of objects */
  public TwoWayLinkedList(E[] objects) {
    for (int i = 0; i < objects.length; i++)
      add(objects[i]);
  }

  /** Return the head element in the list */
  public E getFirst() {
    if (size == 0) {
      return null;
    }
    else {
      return head.element;
    }
  }

  /** Return the last element in the list */
  public E getLast() {
    if (size == 0) {
      return null;
    }
    else {
      return tail.element;
    }
  }

  /** Add an element to the beginning of the list */
  public void addFirst(E e) {
    // Implemented in Section 24.4.3.1, so omitted here
  }

  /** Add an element to the end of the list */
  public void addLast(E e) {
    // Implemented in Section 24.4.3.2, so omitted here
  }

  /** Add a new element at the specified index in this list. The index of the head element is 0 */
  public void add(int index, E e) {
    // Implemented in Section 24.4.3.3, so omitted here
  }

  /** Remove the head node and return the object that is contained in the removed node. */
  public E removeFirst() {
    // Implemented in Section 24.4.3.4, so omitted here
  }

  /** Remove the last node and return the object that is contained in the removed node. */
  public E removeLast() {
    // Implemented in Section 24.4.3.5, so omitted here
  }

  /** Remove the element at the specified position in this list. Return the element that was removed from the list. */
  public E remove(int index) {
    // Implemented earlier in Section 24.4.3.6, so omitted
  }

  /** Override toString() to return elements in the list */
  public String toString() {
    // Implemented earlier, omitted here for brevity
  }

  /** Clear the list */
  public void clear() {
    size = 0;
    head = tail = null;
  }

  /** Return true if this list contains the element e */
  public boolean contains(Object e) {
    // Left as an exercise
    return true;
  }

  /** Return the element at the specified index */
  public E get(int index) {
    // Left as an exercise
    return null;
  }

  /** Return the index of the first matching element in this list. Return −1 if no match. */
  public int indexOf(Object e) {
    // Left as an exercise
    return 0;
  }

  /** Return the index of the last matching element in this list. Return −1 if no match. */
  public int lastIndexOf(E e) {
    // Left as an exercise
    return 0;
  }

  /** Replace the element at the specified position in this list with the specified element. */
  public E set(int index, E e) {
    // Left as an exercise
    return null;
  }

  /** Override iterator() defined in Iterable */ 
  public java.util.Iterator<E> iterator() {
    return new LinkedListIterator();
  }

  /** Return a list iterator at the beginning of the list */
  public ListIterator<E> listIterator() {
    return new LinkedListIterator();
  }

  /** Return a list iterator that starts at the specified index */
  public ListIterator<E> listIterator(int index) {
    // Left as an exercise
    return null;
  }

  private class LinkedListIterator implements ListIterator<E> {
    private Node<E> current = head; // Current index
    
    // Implement ListIterator methods
    // ...
  }
}
